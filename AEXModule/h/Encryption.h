#pragma once
#include "../h/Byteset.h"
namespace Encryption {
	//字典算法密匙
	static const Byteset dictionaries = {
		 0xF1, 0x8B, 0x4D, 0x26, 0x13, 0x09, 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13, 0x09, 0x84,
		 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13, 0x09, 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13,	
		0x09, 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13, 0x09, 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C,
		 0x26, 0x13, 0x09, 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13, 0x09, 0x84, 0xC2, 0x61, 0x30,
		 0x98, 0x4C, 0x26, 0x13, 0x09, 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13, 0x09, 0x84, 0xC2,
		 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13, 0x09, 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13, 0x09,
		 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26, 0x13, 0x09, 0x84, 0xC2, 0x61, 0x30, 0x98, 0x4C, 0x26
	};
	/*
	* 字典_加密
	* @param data 待加密字符串
	* @param key 加密密钥(字典), 默认为官方字典
	* @return 加密后的字符串
	*/
	Byteset DictionariesEncrypt(const Byteset& data, const Byteset& key = dictionaries);
	/*
	* 字典_解密
	* @param data 待解密字符串
	* @param key 解密密钥(字典), 默认为官方字典
	* @return 解密后的字符串
	*/
	Byteset DictionariesDecrypt(const Byteset& data, const Byteset& key = dictionaries);

	//矩阵算法密匙
	static const Byteset matrixKey = {0x6C, 0x5B, 0x4A, 0x39, 0x28, 0x17, 0x06, 0x75, 0x44, 0x33, 0x22, 0x11, 0x80, 0x5F, 0x4E, 0x3D};
	/*
	* 阵列_加密
	* @param data 待加密字符串
	* @param matrix 2维数组,默认,{ 2, 3 },只能2字节长度
	* @param key 加密密钥(数组), 长度必须为16, 默认为官方密钥
	*/
	Byteset MatrixEncrypt(const Byteset& data, const Byteset matrix = { 2, 3 }, const Byteset& key = matrixKey);
	/*
	* 阵列_解密
	* @param data 待解密字符串
	* @param matrix 2维数组,默认,[2,3],只能2字节长度
	* @param key 解密密钥(数组), 长度必须为16, 默认为官方密钥
	*/
	Byteset MatrixDecrypt(const Byteset& data, const Byteset matrix = { 2, 3 }, const Byteset& key = matrixKey);
};